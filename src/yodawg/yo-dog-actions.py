from robocorp import browser
from sema4ai.actions import action, Response, ActionError
import os
from .image_generation import YoDawgImageGenerator
from .models import YoDawgResponse
import time
import dotenv

dotenv.load_dotenv()

LINKEDIN_USERNAME = os.getenv("LINKEDIN_USERNAME")
LINKEDIN_PASSWORD = os.getenv("LINKEDIN_PASSWORD")




@action
def comment_on_linkedin_post_with_image(
    post_url: str
) -> Response:
    """
    Visit a LinkedIn post URL and generate a Yo Dawg meme comment with image.
    
    :param post_url: The URL of the LinkedIn post to comment on.
    """
    # Validate post_url parameter
    if not post_url or post_url.strip() == "":
        raise ActionError("post_url parameter is required and cannot be empty")
    
    configure_browser()
    page = browser.goto(post_url)
    #if not _is_authenticated(page):
    #page = browser.goto("https://www.linkedin.com/login")
    #_login(page, LINKEDIN_USERNAME, LINKEDIN_PASSWORD)
    #page = browser.goto(post_url)
    
    # Get the post content from the current page
    post_content = get_linkedin_post_content(page)
    
    # For testing: Use a static test image and comment instead of generating
    # TODO: Replace with yo_dawg_generator once image upload is working reliably
    #test_image_path = os.path.abspath("photos/yo_dawg_image.png")  # Use absolute path
    #comment_text = "Testing image upload with a Yo Dawg meme!"
    #image_path = test_image_path
    
    # Temporarily comment out the yo_dawg_generator
    yo_dawg_response = yo_dawg_generator(post_content)
    image_path = yo_dawg_response.image_filename
    
    signature = "\n\n---\nðŸŽ¯ This content was generated by The Yo Dawg Sema4ai Action Server\nðŸ“¡ Powered by Model Context Protocol (MCP)\nðŸ¤– Autonomous meme generation system active"
    comment_text = signature
    
    
    # Click on the comment box
    page.get_by_role("textbox", name="Text editor for creating").get_by_role("paragraph").click()
    
    # Add image if provided
    if image_path and os.path.exists(image_path):
        print(f"Uploading image: {image_path}")
        try:
            # Use the expect_file_chooser pattern to handle the upload dialog
            with page.expect_file_chooser() as fc_info:
                page.locator("button[aria-label*='photo']").click()
            file_chooser = fc_info.value
            file_chooser.set_files(image_path)

            # Wait until LinkedIn shows the thumbnail
            page.wait_for_selector("img[alt*='Image preview']", timeout=10_000)
            print("Image uploaded and preview is visible.")

        except Exception as e:
            print(f"Could not upload image: {str(e)}")
    else:
        print(f"Image not found or path empty: {image_path}")
    
    # Add the comment text
    page.get_by_role("textbox", name="Text editor for creating").fill(comment_text)

    # Submit the comment
    print("Submitting comment...")
    
    # Use a more reliable selector for the "Post" button by finding it within the comment form
    page.locator("button[class^='comments-comment-box__submit-button']").click()

    time.sleep(10)
    page.close()
    
    
    result_message = f"Commented on post: {post_url}"
    if image_path:
        result_message += f" with image: {image_path}"
    result_message += f" (Generated Yo Dawg meme)"
    
    return Response(result=result_message)


def get_linkedin_post_content(page) -> str:
    """
    Get the content text from a LinkedIn post page.
    
    :param page: The browser page object already navigated to the LinkedIn post.
    :return: The post content as a string.
    """
    try:
        # Try to find the main post content - updated selector
        post_content = page.locator(".update-components-text").first.inner_text()
        return post_content
    except Exception as e:
        # Fallback selectors
        try:
            post_content = page.locator("[data-test-id='main-feed-activity-card'] .feed-shared-text").first.inner_text()
            return post_content
        except Exception as e2:
            try:
                post_content = page.locator(".feed-shared-text").first.inner_text()
                return post_content
            except Exception as e3:
                return "this post"  # fallback content


def yo_dawg_generator(
    yo_dawg_content: str,
) -> YoDawgResponse:
    """
    A 'Yo Dawg' action that generates a meme caption and image.
    """
    try:
        if not yo_dawg_content:
            raise ActionError("No content provided for meme generation.")

        generator = YoDawgImageGenerator()
        yo_caption = generator.generate_yo_dawg_quote(yo_dawg_content)
        if not yo_caption:
            raise ActionError("Failed to generate Yo Dawg caption.")

        images_dir = "yo-dawg-images"
        if not os.path.exists(images_dir):
            os.makedirs(images_dir)
        unique_filename = f"yo_dawg_image_{int(time.time())}.png"
        image_path = os.path.join(images_dir, unique_filename)
        generator.generate_image(yo_caption, image_path)

        return YoDawgResponse(caption=yo_caption, image_filename=image_path)
    except Exception as e:
        raise ActionError(f"An error occurred: {str(e)}")



def configure_browser():
    browser.configure(
        screenshot="only-on-failure",
        headless=False,
        persistent_context_directory=os.path.join(os.getcwd(), "browser_context"),

    )



def _login(page, username, password):
    page.get_by_role("textbox", name="Email or phone").fill(username)
    page.get_by_role("textbox", name="Password").fill(password)
    page.get_by_role("button", name="Sign in", exact=True).click()

def _is_authenticated(page):
    # Try to find an element that only appears when logged in, e.g., the profile avatar or "Me" menu
    try:
        # This selector may need adjustment based on LinkedIn's DOM
        page.get_by_role("navigation").get_by_text("Me", exact=True, timeout=3000)
        return True
    except Exception:
        return False
